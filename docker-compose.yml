services:
  # ======================================================================
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage. Depending on the hardware you run this Compose on, you may be able
  # to reduce the interval and timeout in the healthcheck to speed up your `docker-compose up` times.
  # ======================================================================

  dagster_postgres:
    image: postgres:11
    container_name: dagster_postgres
    environment:
      POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    ports:
      - "5432:${DAGSTER_POSTGRES_PORT}"
    networks:
      - ${PIPELINE_NETWORK_NAME}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DAGSTER_POSTGRES_USER} -d ${DAGSTER_POSTGRES_DB}",
        ]
      interval: 10s
      timeout: 8s
      retries: 5

  # ======================================================================
  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  # ======================================================================

  dagster_code_example:
    build:
      context: ./services/orchestration/dagster/pipelines
      dockerfile: ./example/Dockerfile.code_space
      args:
        - DAGSTER_CODE_THIS_NAME=${DAGSTER_CODE_EXAMPLE_NAME}
        - DAGSTER_CODE_THIS_PORT=${DAGSTER_CODE_EXAMPLE_PORT}
    container_name: ${DAGSTER_CODE_EXAMPLE_NAME}
    ports:
      - ${DAGSTER_CODE_EXAMPLE_PORT}:${DAGSTER_CODE_EXAMPLE_PORT}
    image: "${DAGSTER_CODE_EXAMPLE_NAME}_image"
    restart: always
    environment:
      WAREHOUSE_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      WAREHOUSE_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      WAREHOUSE_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      WAREHOUSE_POSTGRES_PORT: ${DAGSTER_POSTGRES_PORT}

      DAGSTER_CURRENT_IMAGE: "${DAGSTER_CODE_EXAMPLE_NAME}_image"
      DAGSTER_CODE_THIS_PORT: ${DAGSTER_CODE_EXAMPLE_PORT}
      DAGSTER_CODE_THIS_NAME: ${DAGSTER_CODE_EXAMPLE_NAME}
    networks:
      - ${PIPELINE_NETWORK_NAME}

  # ======================================================================
  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  # ======================================================================

  dagster_webserver:
    build:
      context: ./services/orchestration/dagster/control_plane
      dockerfile: ./Dockerfile.dagster
      args:
        - DAGSTER_POSTGRES_PORT=${DAGSTER_POSTGRES_PORT}
        - DAGSTER_CODE_EXAMPLE_PORT=${DAGSTER_CODE_EXAMPLE_PORT}
        - DAGSTER_CODE_EXAMPLE_NAME=${DAGSTER_CODE_EXAMPLE_NAME}
        - PIPELINE_NETWORK_NAME=${PIPELINE_NETWORK_NAME}
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "${DAGSTER_WEBSERVER_PORT}"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "${DAGSTER_WEBSERVER_PORT}"
    ports:
      - "${DAGSTER_WEBSERVER_PORT}:${DAGSTER_WEBSERVER_PORT}"
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - ${PIPELINE_NETWORK_NAME}
    depends_on:
      dagster_postgres:
        condition: service_healthy
      dagster_code_example:
        condition: service_started

  # ======================================================================
  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  # ======================================================================

  dagster_daemon:
    build:
      context: ./services/orchestration/dagster/control_plane
      dockerfile: ./Dockerfile.dagster
      args:
        - DAGSTER_POSTGRES_PORT=${DAGSTER_POSTGRES_PORT}
        - DAGSTER_CODE_EXAMPLE_PORT=${DAGSTER_CODE_EXAMPLE_PORT}
        - DAGSTER_CODE_EXAMPLE_NAME=${DAGSTER_CODE_EXAMPLE_NAME}
        - PIPELINE_NETWORK_NAME=${PIPELINE_NETWORK_NAME}
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - ${PIPELINE_NETWORK_NAME}
    depends_on:
      dagster_postgres:
        condition: service_healthy
      dagster_code_example:
        condition: service_started

networks:
  pipeline_network:
    driver: bridge
    name: ${PIPELINE_NETWORK_NAME}
